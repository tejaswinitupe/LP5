#include<bits/stdc++.h>
using namespace std;

int sum(int arr[],int n){
	int sum=0;
	#pragma omp parallel for reduction(+:sum)
	for(int i=0;i<n;i++)
	{
		sum=sum+arr[i];
	      	
		
	}
	return sum;
    cout<<sum<<endl;
    
}

int min(int arr[],int n){
	int v=arr[0];
	#pragma omp parallel for reduction(min:v)
	for(int i=0;i<n;i++){
		if(arr[i]<v){
			v=arr[i];
			
		}
		
	}
	cout<<v<<endl;
}

int max(int arr[],int n){
	int v=arr[0];
	#pragma omp parallel for reduction(max:v)
	for(int i=0;i<n;i++){
		if(arr[i]>v){
			v=arr[i];
			
		}
		
	}
	cout<<v<<endl;
}

float avg(int arr[],int n)
{
	return (sum(arr,n))/n;
          
}



int main(){
	cout<<"enter number of elements"<<endl;
	int n;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++){
		int a=rand()%n;
		arr[i]=a;
	}
	cout<<"elements are"<<endl;
	for(int i=0;i<n;i++){
		
	    cout<<" "<<arr[i];
	}
	
	
	cout<<endl<<"sum =";
	auto start= chrono::high_resolution_clock::now();
	sum(arr,n);
	auto end=chrono::high_resolution_clock::now();
	auto tejas=chrono::duration_cast<chrono::microseconds>(end-start).count();
	cout<<"sum requires  "<<tejas<<"   microseconds"<<endl;
	
	cout<<"min =";
	start=chrono::high_resolution_clock::now();
	min(arr,n);
	end=chrono::high_resolution_clock::now();
	auto teja=chrono::duration_cast<chrono::microseconds>(end-start).count();
	cout<<"min requires  "<<teja<<"   microseconds"<<endl;
	
	cout<<"max =";
	start=chrono::high_resolution_clock::now();
	max(arr,n);
	end=chrono::high_resolution_clock::now();
	auto tej=chrono::duration_cast<chrono::microseconds>(end-start).count();
	cout<<"min requires  "<<tej<<"   microseconds"<<endl;
	
	cout<<"average =";
	start=chrono::high_resolution_clock::now();
	avg(arr,n);
	end=chrono::high_resolution_clock::now();
	auto te=chrono::duration_cast<chrono::microseconds>(end-start).count();
	cout<<"average requires  "<<te<<"   microseconds"<<endl;
	
	return 0;
	
	
	
}



