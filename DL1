import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline

# Preprocessing and evaluation
from sklearn.model_selection import train_test_split
from sklearn.compose import make_column_transformer
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error


# Load the Boston Housing dataset
(X_train , y_train), (X_test , y_test) = tf.keras.datasets.boston_housing.load_data(
                                            path = 'boston_housing_npz',
                                            test_split = 0.2,
                                            seed = 42
                                        )
                                        
 # Reserve data for validation
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=42)
X_train.shape, X_val.shape, y_train.shape, y_val.shape


model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(X_train, y_train, epochs=100, batch_size=32, verbose=1)

loss = model.evaluate(X_test, y_test, verbose=0)
print(f"Mean Squared Error (MSE) on test set: {loss:.2f}")

# Make predictions on the test set
predictions = model.predict(X_test)

mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error (MSE): {mse:.2f}")

plt.figure(figsize=(8, 6))
plt.hist(predictions, bins=20, edgecolor='black')
plt.xlabel('Predicted Prices')
plt.ylabel('Frequency')
plt.title('Histogram of Predicted Prices')
plt.show()


plt.figure(figsize=(8, 6))
plt.boxplot([y_test, predictions.flatten()], labels=['True Prices', 'Predicted Prices'])
plt.ylabel('Price')
plt.title('Boxplot of True Prices and Predicted Prices')
plt.show()
