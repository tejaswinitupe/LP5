#include<bits/stdc++.h>
using namespace std;

void bubblesort(int arr[],int N){
	for(int i=0;i<N;i++){
		for(int j=0;j<N-i;j++){
			if(arr[j]>arr[j+1]){
				int temp=arr[j];
				arr[j]=arr[j+1];
				arr[j+1]=temp;
				
			}
		}
	}
}

void parallel_bubblesort(int arr[],int N)
{
	for(int i=0;i<N;i++){
	#pragma omp parallel for
		for(int j=0;j<N;j++){
			if(arr[j]>arr[j+1]){
				int temp=arr[j];
				arr[j]=arr[j+1];
				arr[j+1]=temp;
			}
		}
	}
}

void merge(int arr[],int l,int m , int r)
{
	int n1=m-l+1;
	int n2=r-m;
	int L[n1];
	int R[n2];
	for(int i=0;i<n1;i++){
		L[i]=arr[l+i];
	}
	for(int j=0;j<n2;j++){
		R[j]=arr[m+1+j];
	}
	int k;
	k=l;
	int i=0;
	int j=0;
	while(i<n1 && j<n2){
		if(L[i]<=R[j]){
			arr[k]=L[i];
			i++;
		}
		else{
			arr[k]=R[j];
			j++;
		}
		k++;
	}
	while(i<n1){
		arr[k]=L[i];
		i++;
		k++;
	}
	while(j<n2){
		arr[k]=R[j];
		j++;
		k++;
	}
}


void mergesort(int arr[],int l,int r){
	if(l<r){
		int m=l+(r-l)/2;
		mergesort(arr,l,m);
		mergesort(arr,m+1,r);
		merge(arr,l,m,r);
	}
}


void parallel_mergesort(int arr[],int l,int r){
	if(l<r){
		int m=l+(r-l)/2;
		#pragma omp parallel sections
		{
			#pragma omp section
			{
				parallel_mergesort(arr,l,m);
			}
			#pragma omp section
			{
				parallel_mergesort(arr,m+1,r);
			}
		}
		merge(arr,l,m,r);
	}
}

int main(){
	int N;
	cout<<"Enter number of elements :"<<endl;
	cin>>N;
	int arr[N];
	for(int i=0;i<N;i++){
		int a=rand()%N;
		arr[i]=a;
		cout<<arr[i]<<" ";
		
	}
	int ch;
	cout<<"Select option 1. Bubblesort  2. Mergesort"<<endl;
	cin>>ch;
	switch(ch){
		case 1:
			{
				cout<<"bubblesort"<<endl;
				auto start=chrono::high_resolution_clock::now();
				bubblesort(arr,N);
				auto end=chrono::high_resolution_clock::now();
				auto tejas=chrono::duration_cast<chrono::microseconds>(end-start).count();
				cout<<"Bubblesort takes  "<<tejas<<"  Microseconds"<<endl;
				
				cout<<"Parallel Bubblesort"<<endl;
				start=chrono::high_resolution_clock::now();
				parallel_bubblesort(arr,N);
				end=chrono::high_resolution_clock::now();
				auto tanmay=chrono::duration_cast<chrono::microseconds>(end-start).count();
				cout<<"Parallel bubblesort takes  "<<tanmay<<"  microseconds"<<endl;
				
				cout<<"speedup"<<(float)tejas/tanmay<<endl;
				break;
			}
			case 2:
				{
					cout<<"meregesort"<<endl;
					auto start=chrono::high_resolution_clock::now();
					mergesort(arr,0,N-1);
					auto end=chrono::high_resolution_clock::now();
					auto tej=chrono::duration_cast<chrono::microseconds>(end-start).count();
					cout<<"Mergesort takes   "<<tej<<"microseconds"<<endl;
					
					cout<<"Parallel mergesort takes"<<endl;
					start=chrono::high_resolution_clock::now();
					parallel_mergesort(arr,0,N-1);
					end=chrono::high_resolution_clock::now();
					auto tana=chrono::duration_cast<chrono::microseconds>(end-start).count();
					cout<<"parallel merge sort takes  "<<tana<<"   microseconds";
					
					cout<<"speedup"<<(float)tej/tana;
					break;
				}
	}
	cout<<"sorted array"<<endl;
	for(int i=0;i<N;i++){
		cout<<" "<<arr[i];
	}
	return 0;
}



















